package scxmlgen.Modalities;

import scxmlgen.interfaces.IOutput;



public enum Output implements IOutput{
    

    INIT("[START][Entity][GAME]"),
    GO_BACK("[GO_BACK]"),
    SOUND_OFF("[SOUND_OFF]"),
    SOUND_ON("[SOUND_ON]"),
    ROQUE("[SPECIAL][SpecialMove][ROQUE]"),
    END("[END]"),

    // Movement

    MOVE_UP("[MOVE][PositionFinal][FRONT]"),
    MOVE_DOWN("[MOVE][PositionFinal][BACK]"),
    MOVE_LEFT("[MOVE][PositionFinal][LEFT]"),
    MOVE_RIGHT("[MOVE][PositionFinal][RIGHT]"),

    // Movement example
    // MOVE_KNIGHT_LEFT_1?_RIGHT_2?("[MOVE][KNIGHT][LEFT][1][RIGHT][2]"),
    // ---------------------- Action, piece, start_direction, start_pos?, end_direction, end_pos?

    // Capture

    // Example
    // CAPTURE_KNIGHT_LEFT_PAWN_RIGHT("[CAPTURE][KNIGHT][LEFT][PAWN][RIGHT]"),
    // --------------------------- Action, piece, start_direction, piece_captured, end_direction


    // Movement

    MOVE_KNIGHT_FRONT_FRONT("[MOVE][KNIGHT][FRONT][FRONT]"),
	MOVE_KNIGHT_FRONT_BACK("[MOVE][KNIGHT][FRONT][BACK]"),
	MOVE_KNIGHT_FRONT_LEFT("[MOVE][KNIGHT][FRONT][LEFT]"),
	MOVE_KNIGHT_FRONT_RIGHT("[MOVE][KNIGHT][FRONT][RIGHT]"),
	MOVE_KNIGHT_BACK_FRONT("[MOVE][KNIGHT][BACK][FRONT]"),
	MOVE_KNIGHT_BACK_BACK("[MOVE][KNIGHT][BACK][BACK]"),
	MOVE_KNIGHT_BACK_LEFT("[MOVE][KNIGHT][BACK][LEFT]"),
	MOVE_KNIGHT_BACK_RIGHT("[MOVE][KNIGHT][BACK][RIGHT]"),
	MOVE_KNIGHT_LEFT_FRONT("[MOVE][KNIGHT][LEFT][FRONT]"),
	MOVE_KNIGHT_LEFT_BACK("[MOVE][KNIGHT][LEFT][BACK]"),
	MOVE_KNIGHT_LEFT_LEFT("[MOVE][KNIGHT][LEFT][LEFT]"),
	MOVE_KNIGHT_LEFT_RIGHT("[MOVE][KNIGHT][LEFT][RIGHT]"),
	MOVE_KNIGHT_RIGHT_FRONT("[MOVE][KNIGHT][RIGHT][FRONT]"),
	MOVE_KNIGHT_RIGHT_BACK("[MOVE][KNIGHT][RIGHT][BACK]"),
	MOVE_KNIGHT_RIGHT_LEFT("[MOVE][KNIGHT][RIGHT][LEFT]"),
	MOVE_KNIGHT_RIGHT_RIGHT("[MOVE][KNIGHT][RIGHT][RIGHT]"),
	MOVE_BISHOP_FRONT_FRONT("[MOVE][BISHOP][FRONT][FRONT]"),
	MOVE_BISHOP_FRONT_BACK("[MOVE][BISHOP][FRONT][BACK]"),
	MOVE_BISHOP_FRONT_LEFT("[MOVE][BISHOP][FRONT][LEFT]"),
	MOVE_BISHOP_FRONT_RIGHT("[MOVE][BISHOP][FRONT][RIGHT]"),
	MOVE_BISHOP_BACK_FRONT("[MOVE][BISHOP][BACK][FRONT]"),
	MOVE_BISHOP_BACK_BACK("[MOVE][BISHOP][BACK][BACK]"),
	MOVE_BISHOP_BACK_LEFT("[MOVE][BISHOP][BACK][LEFT]"),
	MOVE_BISHOP_BACK_RIGHT("[MOVE][BISHOP][BACK][RIGHT]"),
	MOVE_BISHOP_LEFT_FRONT("[MOVE][BISHOP][LEFT][FRONT]"),
	MOVE_BISHOP_LEFT_BACK("[MOVE][BISHOP][LEFT][BACK]"),
	MOVE_BISHOP_LEFT_LEFT("[MOVE][BISHOP][LEFT][LEFT]"),
	MOVE_BISHOP_LEFT_RIGHT("[MOVE][BISHOP][LEFT][RIGHT]"),
	MOVE_BISHOP_RIGHT_FRONT("[MOVE][BISHOP][RIGHT][FRONT]"),
	MOVE_BISHOP_RIGHT_BACK("[MOVE][BISHOP][RIGHT][BACK]"),
	MOVE_BISHOP_RIGHT_LEFT("[MOVE][BISHOP][RIGHT][LEFT]"),
	MOVE_BISHOP_RIGHT_RIGHT("[MOVE][BISHOP][RIGHT][RIGHT]"),
	MOVE_ROOK_FRONT_FRONT("[MOVE][ROOK][FRONT][FRONT]"),
	MOVE_ROOK_FRONT_BACK("[MOVE][ROOK][FRONT][BACK]"),
	MOVE_ROOK_FRONT_LEFT("[MOVE][ROOK][FRONT][LEFT]"),
	MOVE_ROOK_FRONT_RIGHT("[MOVE][ROOK][FRONT][RIGHT]"),
	MOVE_ROOK_BACK_FRONT("[MOVE][ROOK][BACK][FRONT]"),
	MOVE_ROOK_BACK_BACK("[MOVE][ROOK][BACK][BACK]"),
	MOVE_ROOK_BACK_LEFT("[MOVE][ROOK][BACK][LEFT]"),
	MOVE_ROOK_BACK_RIGHT("[MOVE][ROOK][BACK][RIGHT]"),
	MOVE_ROOK_LEFT_FRONT("[MOVE][ROOK][LEFT][FRONT]"),
	MOVE_ROOK_LEFT_BACK("[MOVE][ROOK][LEFT][BACK]"),
	MOVE_ROOK_LEFT_LEFT("[MOVE][ROOK][LEFT][LEFT]"),
	MOVE_ROOK_LEFT_RIGHT("[MOVE][ROOK][LEFT][RIGHT]"),
	MOVE_ROOK_RIGHT_FRONT("[MOVE][ROOK][RIGHT][FRONT]"),
	MOVE_ROOK_RIGHT_BACK("[MOVE][ROOK][RIGHT][BACK]"),
	MOVE_ROOK_RIGHT_LEFT("[MOVE][ROOK][RIGHT][LEFT]"),
	MOVE_ROOK_RIGHT_RIGHT("[MOVE][ROOK][RIGHT][RIGHT]"),
	MOVE_PAWN_FRONT_FRONT("[MOVE][PAWN][FRONT][FRONT]"),
	MOVE_PAWN_FRONT_BACK("[MOVE][PAWN][FRONT][BACK]"),
	MOVE_PAWN_FRONT_LEFT("[MOVE][PAWN][FRONT][LEFT]"),
	MOVE_PAWN_FRONT_RIGHT("[MOVE][PAWN][FRONT][RIGHT]"),
	MOVE_PAWN_BACK_FRONT("[MOVE][PAWN][BACK][FRONT]"),
	MOVE_PAWN_BACK_BACK("[MOVE][PAWN][BACK][BACK]"),
	MOVE_PAWN_BACK_LEFT("[MOVE][PAWN][BACK][LEFT]"),
	MOVE_PAWN_BACK_RIGHT("[MOVE][PAWN][BACK][RIGHT]"),
	MOVE_PAWN_LEFT_FRONT("[MOVE][PAWN][LEFT][FRONT]"),
	MOVE_PAWN_LEFT_BACK("[MOVE][PAWN][LEFT][BACK]"),
	MOVE_PAWN_LEFT_LEFT("[MOVE][PAWN][LEFT][LEFT]"),
	MOVE_PAWN_LEFT_RIGHT("[MOVE][PAWN][LEFT][RIGHT]"),
	MOVE_PAWN_RIGHT_FRONT("[MOVE][PAWN][RIGHT][FRONT]"),
	MOVE_PAWN_RIGHT_BACK("[MOVE][PAWN][RIGHT][BACK]"),
	MOVE_PAWN_RIGHT_LEFT("[MOVE][PAWN][RIGHT][LEFT]"),
	MOVE_PAWN_RIGHT_RIGHT("[MOVE][PAWN][RIGHT][RIGHT]"),
	MOVE_QUEEN_FRONT_FRONT("[MOVE][QUEEN][FRONT][FRONT]"),
	MOVE_QUEEN_FRONT_BACK("[MOVE][QUEEN][FRONT][BACK]"),
	MOVE_QUEEN_FRONT_LEFT("[MOVE][QUEEN][FRONT][LEFT]"),
	MOVE_QUEEN_FRONT_RIGHT("[MOVE][QUEEN][FRONT][RIGHT]"),
	MOVE_QUEEN_BACK_FRONT("[MOVE][QUEEN][BACK][FRONT]"),
	MOVE_QUEEN_BACK_BACK("[MOVE][QUEEN][BACK][BACK]"),
	MOVE_QUEEN_BACK_LEFT("[MOVE][QUEEN][BACK][LEFT]"),
	MOVE_QUEEN_BACK_RIGHT("[MOVE][QUEEN][BACK][RIGHT]"),
	MOVE_QUEEN_LEFT_FRONT("[MOVE][QUEEN][LEFT][FRONT]"),
	MOVE_QUEEN_LEFT_BACK("[MOVE][QUEEN][LEFT][BACK]"),
	MOVE_QUEEN_LEFT_LEFT("[MOVE][QUEEN][LEFT][LEFT]"),
	MOVE_QUEEN_LEFT_RIGHT("[MOVE][QUEEN][LEFT][RIGHT]"),
	MOVE_QUEEN_RIGHT_FRONT("[MOVE][QUEEN][RIGHT][FRONT]"),
	MOVE_QUEEN_RIGHT_BACK("[MOVE][QUEEN][RIGHT][BACK]"),
	MOVE_QUEEN_RIGHT_LEFT("[MOVE][QUEEN][RIGHT][LEFT]"),
	MOVE_QUEEN_RIGHT_RIGHT("[MOVE][QUEEN][RIGHT][RIGHT]"),
	MOVE_KING_FRONT_FRONT("[MOVE][KING][FRONT][FRONT]"),
	MOVE_KING_FRONT_BACK("[MOVE][KING][FRONT][BACK]"),
	MOVE_KING_FRONT_LEFT("[MOVE][KING][FRONT][LEFT]"),
	MOVE_KING_FRONT_RIGHT("[MOVE][KING][FRONT][RIGHT]"),
	MOVE_KING_BACK_FRONT("[MOVE][KING][BACK][FRONT]"),
	MOVE_KING_BACK_BACK("[MOVE][KING][BACK][BACK]"),
	MOVE_KING_BACK_LEFT("[MOVE][KING][BACK][LEFT]"),
	MOVE_KING_BACK_RIGHT("[MOVE][KING][BACK][RIGHT]"),
	MOVE_KING_LEFT_FRONT("[MOVE][KING][LEFT][FRONT]"),
	MOVE_KING_LEFT_BACK("[MOVE][KING][LEFT][BACK]"),
	MOVE_KING_LEFT_LEFT("[MOVE][KING][LEFT][LEFT]"),
	MOVE_KING_LEFT_RIGHT("[MOVE][KING][LEFT][RIGHT]"),
	MOVE_KING_RIGHT_FRONT("[MOVE][KING][RIGHT][FRONT]"),
	MOVE_KING_RIGHT_BACK("[MOVE][KING][RIGHT][BACK]"),
	MOVE_KING_RIGHT_LEFT("[MOVE][KING][RIGHT][LEFT]"),
	MOVE_KING_RIGHT_RIGHT("[MOVE][KING][RIGHT][RIGHT]");

    ;
    
    
    private String event;

    Output(String m) {
        event=m;
    }
    
    public String getEvent(){
        return this.toString();
    }

    public String getEventName(){
        return event;
    }
}
